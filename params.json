{
  "name": "Distributed GPU Ray Tracing",
  "tagline": "Ye Yuan, Ken Ling",
  "body": "# Project Proposal\r\n\r\n## Summary\r\n\r\nThe project aims at accelerating the computationally intensive ray tracing algorithm. To achieve this end,\r\nwe will utilize the computing power of both GPU and distributed machines.\r\n\r\n## Background\r\n\r\nRay tracing is one of the most researched fields in Computer Graphics. It is a great technique to produce optical effects such as reflection, refraction, scattering and dispersion phenomena. Its capability of producing a very high degree of visual realism, which is usually higher than that of typical scanline rendering methods, comes with a greater computational cost. So most of the research is focused on how to make it more time efficient. There are many ways to achieve this goal. In this project, we will focus on taking advantage of parallel computing power.\r\n\r\nOne way to make ray tracing faster is to use GPU. This is due to the parallel nature of ray tracing. The most computationally intensive part of ray tracing is the ray-primitive intersection test. Intersection tests of different rays are independent of one another, which leaves much room for parallel acceleration. GPU provide huge amount of parallel executing threads to exploit the parallelism in ray tracing. \r\n\r\nCompared to network latency, the computation time of ray tracing is much higher. So it hints us to use distributed machines to accelerate ray tracing. Different patches of the image are independent of one another. So we treat a single patch as a unit of work, and send the work to different machines using load balancing algorithm.\r\n\r\n## The challenge\r\n\r\n## Resources\r\n\r\n## Goals and Deliverables\r\n\r\n## Platform Choice\r\n\r\n## Schedule",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}